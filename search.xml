<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【重温Python】1.3-数据结构与算法-保留最后N个元素]]></title>
    <url>%2F2019%2F04%2F25%2F%E9%87%8D%E6%B8%A9Python-1.3%2F</url>
    <content type="text"><![CDATA[问题在迭代操作或者其他操作的时候，怎样只保留最后有限几个元素的历史记录？ 解决方案保留有限历史记录正式”collections.deque”大显身手的时候。 比如，下面的代码在多行上面做简单的文本匹配，并返回匹配所在行的最后 N 行。 from collections import deque def search(lines, pattern, history=5): previous_lines = deque(maxlen=history) for line in lines: if pattern in line: yield line,previous_lines previous_lines.append(line) if __name__ == ‘__main__’: with open(r’../../cookbook/somefile.txt’) as f: for line, prevlines in search(f, ‘python’, 5): for pline in prevlines: print(pline, end=‘’) print(line, end=‘’) print(‘-‘ * 20) 在写查询元素的代码时，通常会使用包含 yield 表达式的生成器函数，也就是我们上面示例代码中的那样。 这样可以将搜索过程代码和使用搜索结果代码解耦。 扩展：使用 deque(maxlen=N) 构造函数会新建一个固定大小的队列。当新的元素加入并且这个队列已满的时候， 最老的元素会自动被移除掉。]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>重温Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【重温Python】1.2-数据结构与算法-解压可迭代对象赋值给多个变量]]></title>
    <url>%2F2019%2F04%2F24%2F%E9%87%8D%E6%B8%A9Python-1.2%2F</url>
    <content type="text"><![CDATA[问题：如果一个可迭代对象的元素个数超过变量个数时，会抛出一个”ValueError”,那么怎样才能从这个可迭代对象中解压出 N 个元素出来？ 解决方案在 Python 中可以使用星号表达式来解决上述问题。 考虑下面一个情况，在学期末的时候，想统计一下学期末的平均成绩，但是排除掉第一个和最后一个分数。如果一共只有四个分数，可能就直接去简单的手动赋值，但是如果有 24 个呢？这个时候想好表达式就派上用场了。 def drop_first_last(grades): first, *middle, last = grades return sum(middle) / len(middle) 上述代码为伪代码，其中 grades 为一个 list 对象。grades 中存储成绩，我们使用星号表达式截取除第一个和最后一个的成绩列表。 考虑另外一种情况，假设现在有一些用户的记录列表，每条记录包含一个名字、邮件，接着就是不确定数量的电话号码。可以像下面这样分解这些记录： record = ('Dave', 'dave@example.com', '773-555-1212', '847-555-1212') name, email, *phone_numbers = record phone_numbers 变量永远都是列表类型，不管解压的电话号码数量是多少(包含 0 个)。 任何使用到 phone_numbers 变量的代码就不需要做多余的类型检查(它一定是 list 类型) 扩展 扩展的迭代解压语法是专门为解压不确定个数或任意个数元素的可迭代对象而设计的。通常，这些可迭代对象的元素结构有确定的规则，星号表达式让开发人员很容易的利用这些规则来解压出元素来。 值得注意的是，星号表达式在迭代元素为可变长元组的序列时时很有用的。 records = [ ('foo', 1, 2), ('bar', 'hello'), ('foo', 3, 4), ] def do_foo(x, y): print('foo', x, y) def do_bar(s): print('bar', s) for tag, *args *in*records: if tag == 'foo': do_foo(*args) elif tag == 'bar': do_bar(*args) 星号解压语法在字符串操作的时候也会很有用，比如字符串的分割。 line = 'nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false' uname,*fields, homedir, sh = line.split(':') print(uname) print(fields) print(homedir) print(sh) 有时候，想解压一些元素之后丢弃他们，不能简单地就使用*，但是可以简单的使用一个普通的废弃名称例如’_’或者’ign’等 record = (‘ACME’, 50, 123.45, (12,18,2012)) name, *_, (*_, year) = record print(name) print(year) 在很多函数式语言中，星号解压语法跟列表处理有许多相似之处。比如，如果你有一个列表， 你可以很容易的将它分割成前后两部分： items = [1, 10, 7, 4, 5, 9] head, *tail = items print(items) print(head)]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>重温Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【重温Python】1.1-数据结构与算法-解压序列赋值给多个变量]]></title>
    <url>%2F2019%2F04%2F23%2F%E9%87%8D%E6%B8%A9Python-1.1%2F</url>
    <content type="text"><![CDATA[问题：现在有一个包含 N 个元素的元组或者是序列，怎样将它里面的值解压后同时赋值给 N 个变量？ 解决方案：任何的序列（可迭代对象）可以通过一个简单的赋值语句解压并赋值给多个变量。 唯一的限制条件就是变量的数量必须跟序列元素的数量是一样的。 下面是一个简单的示例： p = (4, 5) x, y = p print(x) print(y) 另一个示例： data = [ 'ACME', 50, 91.1, (2012, 12, 21) ] name, shares, price, (year, mon, day) = data 扩展： 如果变量个数与序列元素的个数不匹配，会产生一个异常。 实际上，这种解压赋值可以用在任何可迭代对象上面，而不仅仅是列表或者元组，包括字符串，文件对象，迭代器和生成器。 可迭代对象示例： s = "hello" a, b, c, d, e = s data = [ 'ACME', 50, 91.1, (2012, 12, 21) ] _, shares, price, _ = data 在 Python，不存在废弃符的语法。但是可以使用任意变量名去占位，到时候丢掉这些变量就行了。例如，上述代码中的’_’。需要保证的是，这些占位符变量名在其它地方没有被用到。]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>重温Python</tag>
      </tags>
  </entry>
</search>
